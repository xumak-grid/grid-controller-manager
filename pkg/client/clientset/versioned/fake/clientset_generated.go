// Copyright  2018 TikalTechnologies.io
// Do not distribute.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	clientset "github.com/xumak-grid/grid-controller-manager/pkg/client/clientset/versioned"
	databasesv1alpha1 "github.com/xumak-grid/grid-controller-manager/pkg/client/clientset/versioned/typed/databases/v1alpha1"
	fakedatabasesv1alpha1 "github.com/xumak-grid/grid-controller-manager/pkg/client/clientset/versioned/typed/databases/v1alpha1/fake"
	elasticpathv1alpha1 "github.com/xumak-grid/grid-controller-manager/pkg/client/clientset/versioned/typed/elasticpath/v1alpha1"
	fakeelasticpathv1alpha1 "github.com/xumak-grid/grid-controller-manager/pkg/client/clientset/versioned/typed/elasticpath/v1alpha1/fake"
	hippov1alpha1 "github.com/xumak-grid/grid-controller-manager/pkg/client/clientset/versioned/typed/hippo/v1alpha1"
	fakehippov1alpha1 "github.com/xumak-grid/grid-controller-manager/pkg/client/clientset/versioned/typed/hippo/v1alpha1/fake"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/discovery"
	fakediscovery "k8s.io/client-go/discovery/fake"
	"k8s.io/client-go/testing"
)

// NewSimpleClientset returns a clientset that will respond with the provided objects.
// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
// without applying any validations and/or defaults. It shouldn't be considered a replacement
// for a real clientset and is mostly useful in simple unit tests.
func NewSimpleClientset(objects ...runtime.Object) *Clientset {
	o := testing.NewObjectTracker(scheme, codecs.UniversalDecoder())
	for _, obj := range objects {
		if err := o.Add(obj); err != nil {
			panic(err)
		}
	}

	fakePtr := testing.Fake{}
	fakePtr.AddReactor("*", "*", testing.ObjectReaction(o))
	fakePtr.AddWatchReactor("*", func(action testing.Action) (handled bool, ret watch.Interface, err error) {
		gvr := action.GetResource()
		ns := action.GetNamespace()
		watch, err := o.Watch(gvr, ns)
		if err != nil {
			return false, nil, err
		}
		return true, watch, nil
	})

	return &Clientset{fakePtr, &fakediscovery.FakeDiscovery{Fake: &fakePtr}}
}

// Clientset implements clientset.Interface. Meant to be embedded into a
// struct to get a default implementation. This makes faking out just the method
// you want to test easier.
type Clientset struct {
	testing.Fake
	discovery *fakediscovery.FakeDiscovery
}

func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	return c.discovery
}

var _ clientset.Interface = &Clientset{}

// DatabasesV1alpha1 retrieves the DatabasesV1alpha1Client
func (c *Clientset) DatabasesV1alpha1() databasesv1alpha1.DatabasesV1alpha1Interface {
	return &fakedatabasesv1alpha1.FakeDatabasesV1alpha1{Fake: &c.Fake}
}

// Databases retrieves the DatabasesV1alpha1Client
func (c *Clientset) Databases() databasesv1alpha1.DatabasesV1alpha1Interface {
	return &fakedatabasesv1alpha1.FakeDatabasesV1alpha1{Fake: &c.Fake}
}

// ElasticpathV1alpha1 retrieves the ElasticpathV1alpha1Client
func (c *Clientset) ElasticpathV1alpha1() elasticpathv1alpha1.ElasticpathV1alpha1Interface {
	return &fakeelasticpathv1alpha1.FakeElasticpathV1alpha1{Fake: &c.Fake}
}

// Elasticpath retrieves the ElasticpathV1alpha1Client
func (c *Clientset) Elasticpath() elasticpathv1alpha1.ElasticpathV1alpha1Interface {
	return &fakeelasticpathv1alpha1.FakeElasticpathV1alpha1{Fake: &c.Fake}
}

// HippoV1alpha1 retrieves the HippoV1alpha1Client
func (c *Clientset) HippoV1alpha1() hippov1alpha1.HippoV1alpha1Interface {
	return &fakehippov1alpha1.FakeHippoV1alpha1{Fake: &c.Fake}
}

// Hippo retrieves the HippoV1alpha1Client
func (c *Clientset) Hippo() hippov1alpha1.HippoV1alpha1Interface {
	return &fakehippov1alpha1.FakeHippoV1alpha1{Fake: &c.Fake}
}
