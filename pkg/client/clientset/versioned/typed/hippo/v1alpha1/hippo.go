// Copyright  2018 TikalTechnologies.io
// Do not distribute.

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/xumak-grid/grid-controller-manager/pkg/apis/hippo/v1alpha1"
	scheme "github.com/xumak-grid/grid-controller-manager/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// HipposGetter has a method to return a HippoInterface.
// A group's client should implement this interface.
type HipposGetter interface {
	Hippos(namespace string) HippoInterface
}

// HippoInterface has methods to work with Hippo resources.
type HippoInterface interface {
	Create(*v1alpha1.Hippo) (*v1alpha1.Hippo, error)
	Update(*v1alpha1.Hippo) (*v1alpha1.Hippo, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.Hippo, error)
	List(opts v1.ListOptions) (*v1alpha1.HippoList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Hippo, err error)
	HippoExpansion
}

// hippos implements HippoInterface
type hippos struct {
	client rest.Interface
	ns     string
}

// newHippos returns a Hippos
func newHippos(c *HippoV1alpha1Client, namespace string) *hippos {
	return &hippos{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the hippo, and returns the corresponding hippo object, and an error if there is any.
func (c *hippos) Get(name string, options v1.GetOptions) (result *v1alpha1.Hippo, err error) {
	result = &v1alpha1.Hippo{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("hippos").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Hippos that match those selectors.
func (c *hippos) List(opts v1.ListOptions) (result *v1alpha1.HippoList, err error) {
	result = &v1alpha1.HippoList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("hippos").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested hippos.
func (c *hippos) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("hippos").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a hippo and creates it.  Returns the server's representation of the hippo, and an error, if there is any.
func (c *hippos) Create(hippo *v1alpha1.Hippo) (result *v1alpha1.Hippo, err error) {
	result = &v1alpha1.Hippo{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("hippos").
		Body(hippo).
		Do().
		Into(result)
	return
}

// Update takes the representation of a hippo and updates it. Returns the server's representation of the hippo, and an error, if there is any.
func (c *hippos) Update(hippo *v1alpha1.Hippo) (result *v1alpha1.Hippo, err error) {
	result = &v1alpha1.Hippo{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("hippos").
		Name(hippo.Name).
		Body(hippo).
		Do().
		Into(result)
	return
}

// Delete takes name of the hippo and deletes it. Returns an error if one occurs.
func (c *hippos) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("hippos").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *hippos) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("hippos").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched hippo.
func (c *hippos) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Hippo, err error) {
	result = &v1alpha1.Hippo{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("hippos").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
